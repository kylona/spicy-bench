Join Point Inmunity Algorithm
-----------------------------------------------------

Calulating Async Join Pairs:

Stack<AsyncNode> AStack;
Map<Async,Join> pairMap;

recursivePairing(currentNode):

    currentNode.asyncParent = AStack.peek();
    if (currentNode is AsyncNode) AStack.push(currentNode);
    if (currentNode is JoinNode):
        if AStack is not empty:
            PairMap.add(new Pair(Astack.pop(), currentNode);
    for Child in currentNode.children:
        if (isolation edge) continue;
        recursivePairing(child)

Data Race Detection:

typedef result Set<Pair<Node, Set<access>>


checkForDataRace(currentNode, stopJoin, raceResult) {

    
    if (currentNode is stopJoin) return new result(None,emptySet);
    if (currentNode is asyncNode) {
        newStopJoin = pairMap.get(currentNode)
        result leftResult = checkForDataRace(currentNode.leftChild,newStopJoin,raceResult);
        result rightResult = checkForDataRace(currentNode.rightChild,newStopJoin,leftResult);
    }
    else checkForDataRace(currentNode.continuationChild,stopJoin,raceResult);
    if (currentNode is isolationNode) {
        
    }


}

