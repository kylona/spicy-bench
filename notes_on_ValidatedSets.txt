Pseudo Code

Bag recursiveAnalyze(Node n, Bag pBag) {

if n is async:
    Bag seriesLeft = recursiveAnalyze(leftChild, pBag)
    Bag asyncBag = Union(pBag,seriesLeft);
    Bag seriesRight = recursiveAnalyze(rightChild, asyncBag)
    this.readyForJoin = true;
    Bag seriesJoin = recursiveAnalyize(join)
    return Union(seriesRight, seriesLeft, seriesJoin);


if n is join:
    if all asyncNode in getAsyncs(join) are readyForJoin && hasChild():
       return  recursiveAnalyze(child)
    else:
       emptyBag = new Bag();
       emptyValidatedSet = new ValidatedSet();
       emptyBag.add(emptyValidatedSet);
       emptyBag.setActiveSet(emptyValidatedSet);
       return emptyBag;

for ValidatedSet vs in pBag:
    if vs.isValidAt(n) && intersect(reads_and_writes, vs) != emptySet: report race
Bag result = recursiveAnalyze(child)
ValidatedSet activeSet = result.getActiveSet();
activeSet.addReadsAndWritesFrom(n);

if n is isolation:
    for Node i in isolationNodesAfter(n):
        activeSet = new ValidatedSet();
        result.add(activeSet);
        result.setActiveSet(activeSet);
        activeSet.setExpiresAfter(i)
        activeSet.setExpiresAfter(joinOf(i));

    for Node i in isolationNodesBefore(n): 
        activeSet.setValidAfter(i);
        activeSet.setValidAfter(joinOf(i));
        activeSet = new ValidatedSet();
        result.add(activeSet);
        result.setActiveSet(activeSet);

return result;
}
