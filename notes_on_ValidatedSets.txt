Pseudo Code

Bag recursiveAnalyze(Node n, Bag pBag) { 
if n is async:
    Bag seriesLeft = recursiveAnalyze(leftChild, pBag)
    Bag asyncBag = Union(pBag,seriesLeft);
    Bag seriesRight = recursiveAnalyze(rightChild, asyncBag)
    n.readyForJoin = true;
    Bag seriesJoin = recursiveAnalyize(getJoin(n))
    return Union(seriesRight, seriesLeft, seriesJoin);


if n is join:
    if all asyncNode in getAsyncs(join) are readyForJoin && hasChild():
       return  recursiveAnalyze(child)
    else:
       sBag = new Bag();
       emptyPocket = new Pocket();
       sBag.add(emptyPocket);
       sBag.setOpenPocket(emptyPocket);
       return sBag;

for Pocket pocket in pBag:
    pocket.updateZip(n);
    if !pocket.isZipped() && intersect(reads_and_writes, pocket) != emptySet: report race
Bag sBag = recursiveAnalyze(child)
Pocket openPocket = sBag.getOpenPocket();

if n is isolation:
    for Node i in isolationNodesAfter(n):
        openPocket = new Pocket();
        sBag.add(openPocket);
        sBag.setOpenPocket(openPocket);
        openPocket.setSeriesAfter(i)
        openPocket.setSeriesAfter(joinOf(i));
        openPocket.addReadsAndWritesFrom(n);

    for Node i in isolationNodesBefore(n): 
        openPocket.setParallelAfter(i);
        openPocket.setParallelAfter(joinOf(i));
        openPocket.addReadsAndWritesFrom(n);
        openPocket = new Pocket();
        sBag.add(openPocket);
        sBag.setOpenPocket(openPocket);
else:
    openPocket.addReadsAndWritesFrom(n);

return sBag;
}
